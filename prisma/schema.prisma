generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
    id Int @id @default(autoincrement())

    fullName String
    email    String @unique()
    password String
    name     String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Order     Order[]
}

// Category model - for One-To-Many relationship with Pizza
model Category {
    id Int @id @default(autoincrement())

    name        String
    description String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    //One-to-many: A category can have many pizzas
    pizzas Pizza[]
}

// Pizza model - for Many-To-Many relationship with Ingredient and central table for OrderItem
model Pizza {
    id Int @id @default(autoincrement())

    name        String
    description String?
    price       Decimal?
    discount    Decimal? @default(0)
    size        String
    url         String
    rating      Int      @default(0)

    imageUrl String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Many-to-One: A pizza belongs to one category
    // This is the foreign key in the Pizza table

    categoryId Int
    category   Category @relation(fields: [categoryId], references: [id])

    // Many-to-many: A pizza can have many ingredients and an ingredient can be on many pizzas
    ingredients IngredientOnPizza[]

    // Many-to-Many: A pizza can be in many orders and an order can have many pizzas
    orders OrderItem[]
}

// Ingredient model - for Many-To-Many relationship with Pizza
model Ingridient {
    id Int @id @default(autoincrement())

    name         String
    isVegetarian Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Many-to-Many: An ingredient can be on many pizzas
    // This is the join table
    pizzas IngredientOnPizza[]
}

// Join table for Many-to-Many relationship between Pizza and Ingredient
model IngredientOnPizza {
    pizzaId Int
    pizza   Pizza @relation(fields: [pizzaId], references: [id])

    ingredientId Int
    ingredient   Ingridient @relation(fields: [ingredientId], references: [id])

    amount String?

    // This is the amount of the ingredient on the pizza
    // For example: "100g", "2 slices", "1 tsp", etc.
    @@id([pizzaId, ingredientId])
}

// Order model - for One-To-Many relationship with User and Many-To-Many relationship with Pizza
// This is the main order table
model Order {
    id Int @id @default(autoincrement())

    status String @default("pending")

    userId Int
    user   User @relation(fields: [userId], references: [id])

    adressId Int?   @unique
    adress   Adress? @relation(fields: [adressId], references: [id])

    orederItems OrderItem[]

    totalPrice Decimal? @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// OrderItem model - for Many-To-Many relationship with Pizza
// This is the join table for the Order and Pizza tables

model OrderItem {
    id Int @id @default(autoincrement())
    quantity Int @default(1)
    price    Decimal?

    Pizza   Pizza? @relation(fields: [pizzaId], references: [id])
    pizzaId Int?

    Order   Order? @relation(fields: [orderId], references: [id])
    orderId Int?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Adress model - for One-To-Many relationship with Order
// This is the main address table
model Adress {
    id    Int    @id @default(autoincrement())
    street String
    city   String
    state  String
    country String
    zipCode String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // One-to-Many: An address can be used in many orders
    Order Order?
}
